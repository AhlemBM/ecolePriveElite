import { Injectable } from '@angular/core';
import {HttpClient, HttpHeaders} from '@angular/common/http';
import {map, Observable} from 'rxjs';
import { environment } from 'src/environments/environment';

@Injectable({
  providedIn: 'root'
})
export class UserService {

  private apiUrl = environment.apiUrl + '/users';

  constructor(private http: HttpClient) { }

  // R√©cup√©rer un utilisateur par son ID
// Service pour r√©cup√©rer l'utilisateur par ID
  getUserById(userId: string): Observable<any> {
    const token = localStorage.getItem('token');
    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + token); // Ajouter le token JWT

    return this.http.get(`${this.apiUrl}/${userId}`, { headers });
  }

  // Ajouter un enfant
  addChild(userId: string, tel: string): Observable<any> {
    return this.http.post<any>(`${this.apiUrl}/${userId}/add-child`, { tel });
  }

  // R√©cup√©rer les informations de l'utilisateur connect√©
  /*getUserInfo(): Observable<any> {
    const token = localStorage.getItem('token');
    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`); // Ajouter le token au header de la requ√™te

    return this.http.get(`${this.apiUrl}/users/me`, { headers }); // Route pour r√©cup√©rer l'utilisateur par son ID (ou un endpoint sp√©cifique pour l'utilisateur)
  }*/

  // V√©rifier si l'utilisateur est connect√© en fonction du token
  isLoggedIn(): boolean {
    return !!localStorage.getItem('token');
  }
  // R√©cup√©rer tous les enseignants
  getAllTeachers(): Observable<any[]> {
    return this.http.get<any>(`${this.apiUrl}`).pipe(
      map((response: any) => {
        console.log('R√©ponse du backend:', response); // üî• DEBUG
        if (Array.isArray(response)) {
          return response.filter((user: any) => user.role === 'teacher'); // ‚úÖ Ajout du type `any`
        } else if (response && Array.isArray(response.users)) {
          return response.users.filter((user: any) => user.role === 'teacher'); // ‚úÖ Ajout du type `any`
        } else {
          console.error("Format inattendu :", response);
          return []; // Retourne un tableau vide si la r√©ponse est incorrecte
        }
      })
    );
  }

  // Supprimer un enseignant par ID
  deleteTeacher(id: string): Observable<any> {
    return this.http.delete(`${this.apiUrl}/${id}`);
  }
  // R√©cup√©rer tous les √©tudiants (role = 'student')
  getAllStudents(): Observable<any[]> {
    return this.http.get<any>(`${this.apiUrl}`).pipe(
      map(response => {
        console.log('R√©ponse du backend:', response); // üî• DEBUG
        if (Array.isArray(response)) {
          return response.filter(user => user.role === 'student'); // Cas 1 : la r√©ponse est un tableau direct
        } else if (response && Array.isArray(response.users)) {
          return response.users.filter((user:any) => user.role === 'student'); // Cas 2 : r√©ponse sous format { users: [...] }
        } else {
          console.error("Format inattendu :", response);
          return []; // Retourne un tableau vide si la r√©ponse est incorrecte
        }
      })
    );
  }

  // Supprimer un utilisateur par ID
  deleteUser(id: string): Observable<any> {
    return this.http.delete(`${this.apiUrl}/${id}`);
  }
  // üî• Ajouter un enseignant
  addTeacher(teacherData: FormData): Observable<any> {
    return this.http.post(`${this.apiUrl}/signup`, teacherData); // üî• Assure-toi que le backend g√®re bien `signup`
  }
  // Ajouter un √©tudiant
  addStudent(studentData: FormData): Observable<any> {
    return this.http.post(`${this.apiUrl}/signup`, studentData); // Utiliser l'URL du backend pour l'ajout d'un √©tudiant
  }
}
